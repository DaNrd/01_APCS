Question 1: What does the following code print out (feel free to run it to find out.)?
	3, 3.14, 3, 7, 7, 88, 2, 2.7
Question 2: The number 7 gets printed out twice in a row, but the number 88 is followed by a 2. Why?
	b is a static variable so it will be changed for all instances of a class
Question 3: The first value printed out is that of MyScope.b. If we try to print MyScope.a, what happens, and why?
	it throws an error that "non static variable a cannot be referenced in a static context". This is because a class has not been created so the variable a does not have an instance to call.
Question 4 My proposed solution consists of 2 new deceleration types: everywhere and nowhere. It also has two modifiers, include and exclude;
	Example code:
		public class Class {
			everywhere int y = 0; // sets the 'everywhere' variable y (similar to the local everywhere example)
			nowhere int x = 1; // sets the 'nowhere' variable (opposite of everywhere)
			public static void main(String[] args){
				int x = 5;
				System.out.println(y); // prints 0
				System.out.println(x); // prints 5
				System.out.println(fun1(x)); // prints 8
				System.out.println(fun2(y)); // prints 1
			}
			public int fun1(int a){
				exclude y; // ignores the 'everywhere' variable y
				int y = 3; // declares local variable y and sets it to 3
				return a + y; // returns 5 + 3
			}
			public int fun2(int a){
				include x; // includes the 'nowhere' variable x
				return a + x; // returns 0 + 1
			}
		}
	There are a few flaws with this concept. The ability to have many variables with the same name would greatly reduce the readability of the code confusing both the end user and possibly even the programmer for more complex projects. Also, the "nowhere" decleration is not super usefull and probably would make more sense to just have the everywhere variable with the exclude modifier. (it might be useful in niche cases such as wanting to group all variable declerations togeather during a research project to make it easier to modify parameters without hunting through multiple classes etc...).
